/// Model ƒë·∫°i di·ªán cho ghi ch√∫ nh·∫≠t k√Ω th√≥i quen
class HabitNoteModel {
  /// ID duy nh·∫•t c·ªßa ghi ch√∫
  final int id;

  /// ID c·ªßa th√≥i quen li√™n k·∫øt
  final int habitId;

  /// T√™n th√≥i quen
  final String habitName;

  /// Ng√†y ghi ch√∫
  final DateTime date;

  /// N·ªôi dung ghi ch√∫
  final String content;

  /// M·ª©c ƒë·ªô c·∫£m x√∫c (1-5)
  /// 1: R·∫•t bu·ªìn, 2: Bu·ªìn, 3: B√¨nh th∆∞·ªùng, 4: Vui, 5: R·∫•t vui
  final int? mood;

  /// Bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c t∆∞∆°ng ·ª©ng
  final String? moodEmoji;

  /// Th·ªùi ƒëi·ªÉm t·∫°o ghi ch√∫
  final DateTime createdAt;

  /// Th·ªùi ƒëi·ªÉm c·∫≠p nh·∫≠t cu·ªëi c√πng
  final DateTime updatedAt;

  /// Kh·ªüi t·∫°o HabitNoteModel
  HabitNoteModel({
    required this.id,
    required this.habitId,
    required this.habitName,
    required this.date,
    required this.content,
    this.mood,
    this.moodEmoji,
    required this.createdAt,
    required this.updatedAt,
  });

  /// T·∫°o HabitNoteModel t·ª´ JSON
  factory HabitNoteModel.fromJson(Map<String, dynamic> json) {
    return HabitNoteModel(
      id: json['id'] as int,
      habitId: json['habitId'] as int,
      habitName: json['habitName'] as String,
      date: DateTime.parse(json['date'] as String),
      content: json['content'] as String,
      mood: json['mood'] as int?,
      moodEmoji: json['moodEmoji'] as String?,
      createdAt: DateTime.parse(json['createdAt'] as String),
      updatedAt: DateTime.parse(json['updatedAt'] as String),
    );
  }

  /// Chuy·ªÉn HabitNoteModel th√†nh JSON
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'habitId': habitId,
      'habitName': habitName,
      'date': date.toIso8601String(),
      'content': content,
      'mood': mood,
      'moodEmoji': moodEmoji,
      'createdAt': createdAt.toIso8601String(),
      'updatedAt': updatedAt.toIso8601String(),
    };
  }

  /// T·∫°o b·∫£n sao c·ªßa HabitNoteModel v·ªõi c√°c gi√° tr·ªã ƒë∆∞·ª£c c·∫≠p nh·∫≠t
  HabitNoteModel copyWith({
    int? id,
    int? habitId,
    String? habitName,
    DateTime? date,
    String? content,
    int? mood,
    String? moodEmoji,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return HabitNoteModel(
      id: id ?? this.id,
      habitId: habitId ?? this.habitId,
      habitName: habitName ?? this.habitName,
      date: date ?? this.date,
      content: content ?? this.content,
      mood: mood ?? this.mood,
      moodEmoji: moodEmoji ?? this.moodEmoji,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }

  /// L·∫•y emoji c·∫£m x√∫c t·ª´ m·ª©c ƒë·ªô
  static String? getMoodEmoji(int? mood) {
    switch (mood) {
      case 1:
        return 'üò¢'; // R·∫•t bu·ªìn
      case 2:
        return 'üòû'; // Bu·ªìn
      case 3:
        return 'üòê'; // B√¨nh th∆∞·ªùng
      case 4:
        return 'üòä'; // Vui
      case 5:
        return 'üòÑ'; // R·∫•t vui
      default:
        return null;
    }
  }

  /// L·∫•y t√™n c·∫£m x√∫c t·ª´ m·ª©c ƒë·ªô
  static String? getMoodName(int? mood) {
    switch (mood) {
      case 1:
        return 'R·∫•t bu·ªìn';
      case 2:
        return 'Bu·ªìn';
      case 3:
        return 'B√¨nh th∆∞·ªùng';
      case 4:
        return 'Vui';
      case 5:
        return 'R·∫•t vui';
      default:
        return null;
    }
  }
}

/// Model ƒë·ªÉ t·∫°o ghi ch√∫ m·ªõi
class CreateHabitNoteModel {
  /// ID c·ªßa th√≥i quen
  final int habitId;

  /// Ng√†y ghi ch√∫
  final DateTime date;

  /// N·ªôi dung ghi ch√∫
  final String content;

  /// M·ª©c ƒë·ªô c·∫£m x√∫c (1-5)
  final int? mood;

  /// Kh·ªüi t·∫°o CreateHabitNoteModel
  CreateHabitNoteModel({
    required this.habitId,
    required this.date,
    required this.content,
    this.mood,
  });

  /// Chuy·ªÉn CreateHabitNoteModel th√†nh JSON
  Map<String, dynamic> toJson() {
    return {
      'habitId': habitId,
      'date': date.toIso8601String(),
      'content': content,
      'mood': mood,
    };
  }
}

/// Model ƒë·ªÉ c·∫≠p nh·∫≠t ghi ch√∫
class UpdateHabitNoteModel {
  /// N·ªôi dung ghi ch√∫ m·ªõi
  final String? content;

  /// M·ª©c ƒë·ªô c·∫£m x√∫c m·ªõi (1-5)
  final int? mood;

  /// Kh·ªüi t·∫°o UpdateHabitNoteModel
  UpdateHabitNoteModel({
    this.content,
    this.mood,
  });

  /// Chuy·ªÉn UpdateHabitNoteModel th√†nh JSON
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = {};
    
    if (content != null) {
      data['content'] = content;
    }
    
    if (mood != null) {
      data['mood'] = mood;
    }
    
    return data;
  }
}