using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore;
using backend.Data;
using backend.Models;
using backend.Models.Dtos;
using System.Security.Claims;

namespace backend.Controllers;

/// <summary>
/// Controller qu·∫£n l√Ω ghi ch√∫ nh·∫≠t k√Ω th√≥i quen.
/// </summary>
[ApiController]
[Route("api/[controller]")]
[Authorize]
public class HabitNoteController : ControllerBase
{
    private readonly ApplicationDbContext _context;

    public HabitNoteController(ApplicationDbContext context)
    {
        _context = context;
    }

    /// <summary>
    /// L·∫•y t·∫•t c·∫£ ghi ch√∫ c·ªßa m·ªôt th√≥i quen.
    /// </summary>
    /// <param name="habitId">ID c·ªßa th√≥i quen</param>
    [HttpGet("habit/{habitId}")]
    public async Task<ActionResult<IEnumerable<HabitNoteResponseDto>>> GetHabitNotes(int habitId)
    {
        try
        {
            var userId = GetCurrentUserId();
            if (userId == null) return Unauthorized();

            // Ki·ªÉm tra th√≥i quen c√≥ thu·ªôc v·ªÅ user hi·ªán t·∫°i kh√¥ng
            var habit = await _context.Habits
                .FirstOrDefaultAsync(h => h.Id == habitId && h.UserId == userId);
            
            if (habit == null)
                return NotFound("Th√≥i quen kh√¥ng t·ªìn t·∫°i ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.");

            var notes = await _context.HabitNotes
                .Where(n => n.HabitId == habitId)
                .Include(n => n.Habit)
                .OrderByDescending(n => n.Date)
                .ToListAsync();

            var noteDtos = notes.Select(n => new HabitNoteResponseDto
            {
                Id = n.Id,
                HabitId = n.HabitId,
                HabitName = n.Habit.Name,
                Date = n.Date,
                Content = n.Content,
                Mood = n.Mood,
                MoodEmoji = GetMoodEmoji(n.Mood),
                CreatedAt = n.CreatedAt,
                UpdatedAt = n.UpdatedAt
            }).ToList();

            return Ok(noteDtos);
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"L·ªói server: {ex.Message}");
        }
    }

    /// <summary>
    /// L·∫•y ghi ch√∫ c·ªßa m·ªôt th√≥i quen trong ng√†y c·ª• th·ªÉ.
    /// </summary>
    /// <param name="habitId">ID c·ªßa th√≥i quen</param>
    /// <param name="date">Ng√†y c·∫ßn l·∫•y ghi ch√∫ (yyyy-MM-dd)</param>
    [HttpGet("habit/{habitId}/date/{date}")]
    public async Task<ActionResult<HabitNoteResponseDto>> GetHabitNoteByDate(int habitId, DateTime date)
    {
        try
        {
            var userId = GetCurrentUserId();
            if (userId == null) return Unauthorized();

            // Ki·ªÉm tra th√≥i quen c√≥ thu·ªôc v·ªÅ user hi·ªán t·∫°i kh√¥ng
            var habit = await _context.Habits
                .FirstOrDefaultAsync(h => h.Id == habitId && h.UserId == userId);
            
            if (habit == null)
                return NotFound("Th√≥i quen kh√¥ng t·ªìn t·∫°i ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.");

            var note = await _context.HabitNotes
                .Include(n => n.Habit)
                .FirstOrDefaultAsync(n => n.HabitId == habitId && n.Date.Date == date.Date);

            if (note == null)
                return NotFound("Kh√¥ng t√¨m th·∫•y ghi ch√∫ cho ng√†y n√†y.");

            var noteDto = new HabitNoteResponseDto
            {
                Id = note.Id,
                HabitId = note.HabitId,
                HabitName = note.Habit.Name,
                Date = note.Date,
                Content = note.Content,
                Mood = note.Mood,
                MoodEmoji = GetMoodEmoji(note.Mood),
                CreatedAt = note.CreatedAt,
                UpdatedAt = note.UpdatedAt
            };

            return Ok(noteDto);
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"L·ªói server: {ex.Message}");
        }
    }

    /// <summary>
    /// T·∫°o ghi ch√∫ m·ªõi cho th√≥i quen.
    /// </summary>
    /// <param name="createDto">Th√¥ng tin ghi ch√∫ m·ªõi</param>
    [HttpPost]
    public async Task<ActionResult<HabitNoteResponseDto>> CreateHabitNote(CreateHabitNoteDto createDto)
    {
        try
        {
            var userId = GetCurrentUserId();
            if (userId == null) return Unauthorized();

            // Ki·ªÉm tra th√≥i quen c√≥ thu·ªôc v·ªÅ user hi·ªán t·∫°i kh√¥ng
            var habit = await _context.Habits
                .FirstOrDefaultAsync(h => h.Id == createDto.HabitId && h.UserId == userId);
            
            if (habit == null)
                return NotFound("Th√≥i quen kh√¥ng t·ªìn t·∫°i ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.");

            // Ki·ªÉm tra ƒë√£ c√≥ ghi ch√∫ cho ng√†y n√†y ch∆∞a
            var existingNote = await _context.HabitNotes
                .FirstOrDefaultAsync(n => n.HabitId == createDto.HabitId && n.Date.Date == createDto.Date.Date);

            if (existingNote != null)
                return BadRequest("ƒê√£ c√≥ ghi ch√∫ cho th√≥i quen n√†y trong ng√†y. Vui l√≤ng c·∫≠p nh·∫≠t ghi ch√∫ hi·ªán c√≥.");

            var note = new HabitNote
            {
                HabitId = createDto.HabitId,
                Date = createDto.Date.Date, // Ch·ªâ l∆∞u ng√†y, kh√¥ng l∆∞u gi·ªù
                Content = createDto.Content,
                Mood = createDto.Mood,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };

            _context.HabitNotes.Add(note);
            await _context.SaveChangesAsync();

            // Load l·∫°i ƒë·ªÉ c√≥ th√¥ng tin Habit
            await _context.Entry(note).Reference(n => n.Habit).LoadAsync();

            var noteDto = new HabitNoteResponseDto
            {
                Id = note.Id,
                HabitId = note.HabitId,
                HabitName = note.Habit.Name,
                Date = note.Date,
                Content = note.Content,
                Mood = note.Mood,
                MoodEmoji = GetMoodEmoji(note.Mood),
                CreatedAt = note.CreatedAt,
                UpdatedAt = note.UpdatedAt
            };

            return CreatedAtAction(nameof(GetHabitNoteByDate), 
                new { habitId = note.HabitId, date = note.Date.ToString("yyyy-MM-dd") }, 
                noteDto);
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"L·ªói server: {ex.Message}");
        }
    }

    /// <summary>
    /// C·∫≠p nh·∫≠t ghi ch√∫ th√≥i quen.
    /// </summary>
    /// <param name="id">ID c·ªßa ghi ch√∫</param>
    /// <param name="updateDto">Th√¥ng tin c·∫≠p nh·∫≠t</param>
    [HttpPut("{id}")]
    public async Task<ActionResult<HabitNoteResponseDto>> UpdateHabitNote(int id, UpdateHabitNoteDto updateDto)
    {
        try
        {
            var userId = GetCurrentUserId();
            if (userId == null) return Unauthorized();

            var note = await _context.HabitNotes
                .Include(n => n.Habit)
                .FirstOrDefaultAsync(n => n.Id == id);

            if (note == null)
                return NotFound("Ghi ch√∫ kh√¥ng t·ªìn t·∫°i.");

            // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
            if (note.Habit.UserId != userId)
                return Forbid("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a ghi ch√∫ n√†y.");

            // C·∫≠p nh·∫≠t th√¥ng tin
            if (!string.IsNullOrEmpty(updateDto.Content))
                note.Content = updateDto.Content;
            
            if (updateDto.Mood.HasValue)
                note.Mood = updateDto.Mood;

            note.UpdatedAt = DateTime.UtcNow;

            await _context.SaveChangesAsync();

            var noteDto = new HabitNoteResponseDto
            {
                Id = note.Id,
                HabitId = note.HabitId,
                HabitName = note.Habit.Name,
                Date = note.Date,
                Content = note.Content,
                Mood = note.Mood,
                MoodEmoji = GetMoodEmoji(note.Mood),
                CreatedAt = note.CreatedAt,
                UpdatedAt = note.UpdatedAt
            };

            return Ok(noteDto);
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"L·ªói server: {ex.Message}");
        }
    }

    /// <summary>
    /// X√≥a ghi ch√∫ th√≥i quen.
    /// </summary>
    /// <param name="id">ID c·ªßa ghi ch√∫</param>
    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteHabitNote(int id)
    {
        try
        {
            var userId = GetCurrentUserId();
            if (userId == null) return Unauthorized();

            var note = await _context.HabitNotes
                .Include(n => n.Habit)
                .FirstOrDefaultAsync(n => n.Id == id);

            if (note == null)
                return NotFound("Ghi ch√∫ kh√¥ng t·ªìn t·∫°i.");

            // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
            if (note.Habit.UserId != userId)
                return Forbid("B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ghi ch√∫ n√†y.");

            _context.HabitNotes.Remove(note);
            await _context.SaveChangesAsync();

            return NoContent();
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"L·ªói server: {ex.Message}");
        }
    }

    /// <summary>
    /// L·∫•y ID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ JWT token.
    /// </summary>
    private string? GetCurrentUserId()
    {
        return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    }

    /// <summary>
    /// Chuy·ªÉn ƒë·ªïi m·ª©c ƒë·ªô c·∫£m x√∫c th√†nh emoji.
    /// </summary>
    /// <param name="mood">M·ª©c ƒë·ªô c·∫£m x√∫c (1-5)</param>
    /// <returns>Emoji t∆∞∆°ng ·ª©ng</returns>
    private string? GetMoodEmoji(int? mood)
    {
        return mood switch
        {
            1 => "üò¢", // R·∫•t bu·ªìn
            2 => "üòû", // Bu·ªìn
            3 => "üòê", // B√¨nh th∆∞·ªùng
            4 => "üòä", // Vui
            5 => "üòÑ", // R·∫•t vui
            _ => null
        };
    }
}